S3.2Y = Q786,
S4.1Y = Q787,
S4.2Y = Q788,
S4.3Y = Q789,
S4.4Y = Q790,
S5.1Y = Q791,
S5.2Y = Q792,
S5.3Y = Q793,
S5.4Y = Q794,
S6.1Y = Q795,
S6.2Y = Q796,
S6.3Y = Q797,
S6.4Y = Q798,
S6.5Y = Q799,
S6.6Y = Q800,
S6.7Y = Q801,
S6.8Y = Q802,
S7.1Y = Q803,
S7.2Y = Q804,
S7.3Y = Q805,
S7.4Y = Q806,
S7.5Y = Q807,
S7.6Y = Q808,
S7.7Y = Q809,
S8.1Y = Q810,
S8.2Y = Q811,
S8.3Y = Q812,
S8.4Y = Q813,
S8.5Y = Q814,
S8.6Y = Q815,
S8.7Y = Q816,
S8.8Y = Q817,
S8.9Y = Q818,
S8.10Y = Q819,
S8.11Y = Q820,
S8.12Y = Q821,
S8.13Y = Q822,
S9.1Y = Q823,
S9.2Y = Q824,
S9.3Y = Q825,
S9.4Y = Q826,
# STAKEHOLDERS
ProfRole = Q65,
ProfAgeRanges = Q67,
S1.1S = Q649,
S1.2S = Q650,
S1.3S = Q651,
S1.4S = Q652,
Q1ADAPT1 = Q653_1,
Q1ADAPT2 = Q653_2,
Q1ADAPT3 = Q653_3,
Q1ACCESS1 = Q654_1,
Q1ACCESS2 = Q654_2,
Q1ACCESS3 = Q654_3,
S2.1S = Q660,
S2.2S = Q661,
S2.3S = Q662,
S2.4S = Q663,
S2.5S = Q664,
S2.6S = Q665,
S2.7S = Q666,
S2.8S = Q667,
Q2ADAPT1 = Q668_1,
Q2ADAPT2 = Q668_2,
Q2ADAPT3 = Q668_3,
Q2ACCESS1 = Q669_1,
Q2ACCESS2 = Q669_2,
Q2ACCESS3 = Q669_3,
S3.1S = Q675,
S3.2S = Q676,
Q3ADAPT1 = Q677_1,
Q3ADAPT2 = Q677_2,
Q3ADAPT3 = Q677_3,
Q3ACCESS1 = Q678_1,
Q3ACCESS2 = Q678_2,
Q3ACCESS3 = Q678_3,
S4.1S = Q684,
S4.2S = Q685,
S4.3S = Q686,
S4.4S = Q687,
Q4ADAPT1 = Q688_1,
Q4ADAPT2 = Q688_2,
Q4ADAPT3 = Q688_3,
Q4ACCESS1 = Q689_1,
Q4ACCESS2 = Q689_2,
Q4ACCESS3 = Q689_3,
S5.1S = Q695,
S5.2S = Q696,
S5.3S = Q697,
S5.4S = Q698,
Q5ADAPT1 = Q699_1,
Q5ADAPT2 = Q699_2,
Q5ADAPT3 = Q699_3,
Q5ACCESS1 = Q700_1,
Q5ACCESS2 = Q700_2,
Q5ACCESS3 = Q700_3,
S6.1S = Q706,
S6.2S = Q707,
S6.3S = Q708,
S6.4S = Q709,
S6.5S = Q710,
S6.6S = Q711,
S6.7S = Q712,
S6.8S = Q713,
Q6ADAPT1 = Q714_1,
Q6ADAPT2 = Q714_2,
Q6ADAPT3 = Q714_3,
Q6ACCESS1 = Q715_1,
Q6ACCESS2 = Q715_2,
Q6ACCESS3 = Q715_3,
S7.1S = Q721,
S7.2S = Q722,
S7.3S = Q723,
S7.4S = Q724,
S7.5S = Q725,
S7.6S = Q726,
S7.7S = Q727,
Q7ADAPT1 = Q728_1,
Q7ADAPT2 = Q728_2,
Q7ADAPT3 = Q728_3,
Q7ACCESS1 = Q729_1,
Q7ACCESS2 = Q729_2,
Q7ACCESS3 = Q729_3,
S8.1S = Q735,
S8.2S = Q736,
S8.3S = Q737,
S8.4S = Q738,
S8.5S = Q739,
S8.6S = Q740,
S8.7S = Q741,
S8.8S = Q742,
S8.9S = Q743,
S8.10S = Q744,
S8.11S = Q745,
S8.12S = Q746,
S8.13S = Q747,
Q8ADAPT1 = Q748_1,
Q8ADAPT2 = Q748_2,
Q8ADAPT3 = Q748_3,
Q8ACCESS1 = Q749_1,
Q8ACCESS2 = Q749_2,
Q8ACCESS3 = Q749_3,
S9.1S = Q755,
S9.2S = Q756,
S9.3S = Q757,
S9.4S = Q758,
Q9ADAPT1 = Q759_1,
Q9ADAPT2 = Q759_2,
Q9ADAPT3 = Q759_3,
Q9ACCESS1 = Q760_1,
Q9ACCESS2 = Q760_2,
Q9ACCESS3 = Q760_3
)
)
)
C1_Dfs_NonCharter <- map(C1_Dfs_NonCharter, ~(.x %>%
mutate_at(vars(2:12),
~as.numeric(recode(.,
"None"=0,
"A little of the time"=1,
"Sometime"=2,
"Most of the time"=3,
"All the time"=4)))
# clean C1 Charter (because of diff question numbers)
PaVirtual_C1 <- PaVirtual_C1 %>% select(-c(1:10,15:18,73,74,76,77,91:93,109:111,121:123,135:137,149:151,167:169,184:186,207:209,221:223,224,228:231,236:238,247:249,252:254:259:261,266:268,277:279,287:289,303:305,310:314,315:706,709:720))
View(forReferenceC1)
C1_Dfs_NonCharter <- map(C1_Dfs_NonCharter, ~(.x %>%
mutate_at(vars(6:59),
~as.numeric(recode(.,
"None"=0,
"A little of the time"=1,
"Sometime"=2,
"Most of the time"=3,
"All the time"=4)))))
View(C1_Dfs_NonCharter)
C1_Dfs_NonCharter <- map(C1_Dfs_NonCharter, ~(.x %>%
mutate_at(vars(6:59),
~as.numeric(recode(
"None"=0,
"A little of the time"=1,
"Sometime"=2,
"Most of the time"=3,
"All the time"=4)))))
rm(C1_Dfs_NonCharter)
# remove first row that has secondary header junk from Qualtrics
C1_Dfs_NonCharter <- map(C1_Dfs_NonCharter, ~(.x %>%
filter(!row_number() %in% c(1))
)
)
# Import data
Abington_C2 <- read_excel("Abington.xlsx")
Agora_C2 <- read_excel("Agora.xlsx")
Allentown_C1 <- read_excel("Allentown.xlsx")
AvonGrove_C1 <- read_excel("Avon_Grove.xlsx")
Bethel_C2 <- read_excel("Bethel.xlsx")
Butler_C1 <- read_excel("Butler.xlsx")
CannonMac_C1 <- read_excel("Canon_McMillan.xlsx")
Curwensville_C2 <- read_excel("Curwensville.xlsx")
Dover_C2 <- read_excel("Dover.xlsx")
EastLycoming_C1 <- read_excel("East_Lycoming.xlsx")
HillFreedman_C2 <- read_excel("HillFreedman.xlsx")
InsightPA_C2 <- read_excel("InsightPa.xlsx")
Lebanon_C2 <- read_excel("Lebanon.xlsx")
Maritime_C2 <- read_excel("Maritime.xlsx")
Moshannon_C2 <- read_excel("Moshannon.xlsx")
MountainView_C1 <- read_excel("Mountain_View.xlsx")
PaVirtual_C1 <- read_excel("PA_Virtual_Charter.xlsx")
PleasantValley_C2 <- read_excel("Pleasant.xlsx")
Plum_C1 <- read_excel("Plum_Borough.xlsx")
ReachCyber_C2 <- read_excel("ReachCyber.xlsx")
SoutheastDelco_C1 <- read_excel("Southeast_Delco.xlsx")
Southpark_C2 <- read_excel("SouthPark.xlsx")
SouthWestern_C1 <- read_excel("SouthWestern.xlsx")
Troy_C2 <- read_excel("Troy.xlsx")
UnionArea_C1 <- read_excel("Union_Area.xlsx")
# list of c1 dfs for non-charters. Will iterate through it and clean each.
C1_Dfs_NonCharter <- list("Allentown" = Allentown_C1,
"AvonGrove" = AvonGrove_C1,
"Bulter" = Butler_C1,
"CannonMac" = CannonMac_C1,
"EastLycoming" = EastLycoming_C1,
"MountainView" = MountainView_C1,
"Plum" = Plum_C1,
"SouthEastDelco" = SoutheastDelco_C1,
"SouthWestern" = SouthWestern_C1,
"UnionArea" = UnionArea_C1)
# Clean Cohort I Sites
# remove unneeded columns
C1_Dfs_NonCharter <- map(C1_Dfs_NonCharter, ~(.x %>%
select(-c(StartDate,EndDate,Status,Progress,`Duration (in seconds)`,Finished,RecordedDate,DistributionChannel,UserLanguage,Q5,Q5_38_TEXT,Q6,Q6_7_TEXT,Q7,Q8,Q65_9_TEXT,Q65_10_TEXT,Q68,Q68_64_TEXT,Q656,Q657,Q658,Q671,Q672,Q673,Q680,Q681,Q682,Q691,Q692,Q693,Q702,Q703,Q704,Q717,Q718,Q719,Q731,Q732,Q733,Q751,Q752,Q752,Q753,Q762,Q763,Q764,Q674,Q674_17_TEXT,Q674_18_TEXT,Q165,Q177,Q178,Q179,Q189,Q190,Q191,Q195,Q196,Q197,Q203,Q204,Q205,Q211,Q212,Q213,Q223,Q224,Q225,Q234,Q235,Q236,Q251,Q252,Q253,Q259,Q260,Q261,Q262,Q263,Q166,Q164_10_TEXT,Q170_1,Q170_2,Q170_3,Q170_4,Q170_5,Q171_1,Q171_4,Q171_5,Q171_6,Q171_7,Q560_1,Q560_2,Q560_3,Q560_4,Q560_5,Q561,Q562,Q655,Q670,Q679,Q690,Q701,Q716,Q730,Q750,Q761,Q827,Q828,321:698,703:715))
))
# remove first row that has secondary header junk from Qualtrics
C1_Dfs_NonCharter <- map(C1_Dfs_NonCharter, ~(.x %>%
filter(!row_number() %in% c(1))
)
)
forReferenceC1 <- C1_Dfs_NonCharter[["Allentown"]]
C1_Dfs_NonCharter <- map(C1_Dfs_NonCharter, ~(.x %>%
rename(
role = Q1,
# YOUTH
youthAge = Q2,
youthGender = Q3,
youthRace = Q4,
S1.1Y = Q773,
S1.2Y = Q774,
S1.3Y = Q775,
S1.4Y = Q776,
S2.1Y = Q777,
S2.2Y = Q778,
S2.3Y = Q779,
S2.4Y = Q780,
S2.5Y = Q781,
S2.6Y = Q782,
S2.7Y = Q783,
S2.8Y = Q784,
S3.1Y = Q785,
S3.2Y = Q786,
S4.1Y = Q787,
S4.2Y = Q788,
S4.3Y = Q789,
S4.4Y = Q790,
S5.1Y = Q791,
S5.2Y = Q792,
S5.3Y = Q793,
S5.4Y = Q794,
S6.1Y = Q795,
S6.2Y = Q796,
S6.3Y = Q797,
S6.4Y = Q798,
S6.5Y = Q799,
S6.6Y = Q800,
S6.7Y = Q801,
S6.8Y = Q802,
S7.1Y = Q803,
S7.2Y = Q804,
S7.3Y = Q805,
S7.4Y = Q806,
S7.5Y = Q807,
S7.6Y = Q808,
S7.7Y = Q809,
S8.1Y = Q810,
S8.2Y = Q811,
S8.3Y = Q812,
S8.4Y = Q813,
S8.5Y = Q814,
S8.6Y = Q815,
S8.7Y = Q816,
S8.8Y = Q817,
S8.9Y = Q818,
S8.10Y = Q819,
S8.11Y = Q820,
S8.12Y = Q821,
S8.13Y = Q822,
S9.1Y = Q823,
S9.2Y = Q824,
S9.3Y = Q825,
S9.4Y = Q826,
# STAKEHOLDERS
ProfRole = Q65,
ProfAgeRanges = Q67,
S1.1S = Q649,
S1.2S = Q650,
S1.3S = Q651,
S1.4S = Q652,
Q1ADAPT1 = Q653_1,
Q1ADAPT2 = Q653_2,
Q1ADAPT3 = Q653_3,
Q1ACCESS1 = Q654_1,
Q1ACCESS2 = Q654_2,
Q1ACCESS3 = Q654_3,
S2.1S = Q660,
S2.2S = Q661,
S2.3S = Q662,
S2.4S = Q663,
S2.5S = Q664,
S2.6S = Q665,
S2.7S = Q666,
S2.8S = Q667,
Q2ADAPT1 = Q668_1,
Q2ADAPT2 = Q668_2,
Q2ADAPT3 = Q668_3,
Q2ACCESS1 = Q669_1,
Q2ACCESS2 = Q669_2,
Q2ACCESS3 = Q669_3,
S3.1S = Q675,
S3.2S = Q676,
Q3ADAPT1 = Q677_1,
Q3ADAPT2 = Q677_2,
Q3ADAPT3 = Q677_3,
Q3ACCESS1 = Q678_1,
Q3ACCESS2 = Q678_2,
Q3ACCESS3 = Q678_3,
S4.1S = Q684,
S4.2S = Q685,
S4.3S = Q686,
S4.4S = Q687,
Q4ADAPT1 = Q688_1,
Q4ADAPT2 = Q688_2,
Q4ADAPT3 = Q688_3,
Q4ACCESS1 = Q689_1,
Q4ACCESS2 = Q689_2,
Q4ACCESS3 = Q689_3,
S5.1S = Q695,
S5.2S = Q696,
S5.3S = Q697,
S5.4S = Q698,
Q5ADAPT1 = Q699_1,
Q5ADAPT2 = Q699_2,
Q5ADAPT3 = Q699_3,
Q5ACCESS1 = Q700_1,
Q5ACCESS2 = Q700_2,
Q5ACCESS3 = Q700_3,
S6.1S = Q706,
S6.2S = Q707,
S6.3S = Q708,
S6.4S = Q709,
S6.5S = Q710,
S6.6S = Q711,
S6.7S = Q712,
S6.8S = Q713,
Q6ADAPT1 = Q714_1,
Q6ADAPT2 = Q714_2,
Q6ADAPT3 = Q714_3,
Q6ACCESS1 = Q715_1,
Q6ACCESS2 = Q715_2,
Q6ACCESS3 = Q715_3,
S7.1S = Q721,
S7.2S = Q722,
S7.3S = Q723,
S7.4S = Q724,
S7.5S = Q725,
S7.6S = Q726,
S7.7S = Q727,
Q7ADAPT1 = Q728_1,
Q7ADAPT2 = Q728_2,
Q7ADAPT3 = Q728_3,
Q7ACCESS1 = Q729_1,
Q7ACCESS2 = Q729_2,
Q7ACCESS3 = Q729_3,
S8.1S = Q735,
S8.2S = Q736,
S8.3S = Q737,
S8.4S = Q738,
S8.5S = Q739,
S8.6S = Q740,
S8.7S = Q741,
S8.8S = Q742,
S8.9S = Q743,
S8.10S = Q744,
S8.11S = Q745,
S8.12S = Q746,
S8.13S = Q747,
Q8ADAPT1 = Q748_1,
Q8ADAPT2 = Q748_2,
Q8ADAPT3 = Q748_3,
Q8ACCESS1 = Q749_1,
Q8ACCESS2 = Q749_2,
Q8ACCESS3 = Q749_3,
S9.1S = Q755,
S9.2S = Q756,
S9.3S = Q757,
S9.4S = Q758,
Q9ADAPT1 = Q759_1,
Q9ADAPT2 = Q759_2,
Q9ADAPT3 = Q759_3,
Q9ACCESS1 = Q760_1,
Q9ACCESS2 = Q760_2,
Q9ACCESS3 = Q760_3
)
)
)
recoder <- function(df, my_col) {
df %>%
mutate("{{my_col}}" := recode({{my_col}},
'A lot' = 1
)
)
}
C1_Dfs_NonCharter <- map(
.x = C1_Dfs_NonCharter,
.f = recoder,
my_col = c(6:59)
)
recoder <- function(df, my_col) {
df %>%
mutate("{{my_col}}" := recode({{my_col}},
'A lot' = 1
)
)
}
C1_Dfs_NonCharter <- map(
.x = C1_Dfs_NonCharter,
.f = recoder,
my_col = S1.1
)
recoder <- function(df, my_col) {
df %>%
mutate("{{my_col}}" := recode({{my_col}},
'A lot' = 1
)
)
}
C1_Dfs_NonCharter <- map(
.x = C1_Dfs_NonCharter,
.f = recoder,
my_col = S1.1Y
)
# list of c1 dfs for non-charters. Will iterate through it and clean each.
C1_Dfs_NonCharter <- list("Allentown" = Allentown_C1,
"AvonGrove" = AvonGrove_C1,
"Bulter" = Butler_C1,
"CannonMac" = CannonMac_C1,
"EastLycoming" = EastLycoming_C1,
"MountainView" = MountainView_C1,
"Plum" = Plum_C1,
"SouthEastDelco" = SoutheastDelco_C1,
"SouthWestern" = SouthWestern_C1,
"UnionArea" = UnionArea_C1)
C2_Dfs_NonCharter <- list("Agora" = Agora_C2,
"Bethel" = Bethel_C2,
"Curwensville" = Curwensville_C2,
"Dover" = Dover_C2,
"HillFreedman" = HillFreedman_C2,
"Insight" = InsightPA_C2,
"Lebanon" = Lebanon_C2,
"Maritime" = Maritime_C2,
"Moshannon" = Moshannon_C2,
"PleasantValley" = PleasantValley_C2,
"ReachCyber" = ReachCyber_C2,
"SouthPark" = Southpark_C2,
"Troy" = Troy_C2
)
C2_Dfs_NonCharter <- list("Abington" = Abington_C2,
"Bethel" = Bethel_C2,
"Curwensville" = Curwensville_C2,
"Dover" = Dover_C2,
"Lebanon" = Lebanon_C2,
"Moshannon" = Moshannon_C2,
"PleasantValley" = PleasantValley_C2,
"SouthPark" = Southpark_C2,
"Troy" = Troy_C2
)
C2_Dfs_Charter <- list("Agora" = Agora_C2,
"HillFreedman" = HillFreedman_C2,
"InsightPA" = InsightPA_C2,
"Maritime" = Maritime_C2,
"Reach" = ReachCyber_C2
)
View(Abington_C2)
# remove unneeded columns
C2_Dfs_NonCharter <- map(C2_Dfs_NonCharter, ~(.x %>%
select(
-c(startDate,EndDate)
)
)
)
C2_Dfs_NonCharter <- map(C2_Dfs_NonCharter, ~(.x %>%
select(
-c(startDate,EndDate)
)
)
)
C2_Dfs_NonCharter <- map(C2_Dfs_NonCharter, ~(.x %>%
select(-c(StartDate,EndDate,Status,Progress,`Duration (in seconds)`,Finished,RecordedDate,RecipientLastName,DistributionChannel,UserLanguage))
))
# Load all packages
library(tidyverse)
library(readxl)
C2_Dfs_NonCharter <- map(C2_Dfs_NonCharter, ~(.x %>%
select(-c(StartDate,EndDate,Status,Progress,`Duration (in seconds)`,Finished,RecordedDate,RecipientLastName,DistributionChannel,UserLanguage))
))
